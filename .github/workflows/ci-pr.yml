# Unique name for this workflow
name: CI on PR

# Definition when the workflow should run
on:
  workflow_dispatch:
  pull_request:
    types: [opened, edited, synchronize, reopened]

# Jobs to be executed
jobs:
  # Formatting and linting only runs on human-submitted PRs
  format-lint-lwc-tests:
    runs-on: ubuntu-latest
    steps:
      # Checkout the source code
      - name: "Checkout source code"
        uses: actions/checkout@v4

      # Cache node_modules to speed up the process
      - name: "Restore node_modules cache"
        id: cache-npm
        uses: actions/cache@v4
        with:
          path: node_modules
          key: npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            npm-${{ env.cache-name }}-
            npm-
      # Install npm dependencies for Prettier and Jest
      - name: "Install npm dependencies"
        if: steps.cache-npm.outputs.cache-hit != 'true'
        run: npm ci

      # Prettier formatting
      - name: "Code formatting verification with Prettier"
        run: npm run prettier:verify

      # Lint LWC / Aura
      - name: "Lint Lightning Web Components / Aura Components"
        run: |
          if find ./force-app/main/default/lwc -mindepth 1 -type d | grep -q .; then
            npm run lint
          else
            echo "No LWC components found. Skipping lint."
          fi

      # LWC unit tests
      - name: "Unit test Lightning Web Components"
        run: npm run test:unit:coverage

      # Upload code coverage data
      - name: "Upload code coverage for LWC to Codecov.io"
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: LWC

  developer-org-test:
    runs-on: ubuntu-latest
    needs: format-lint-lwc-tests
    steps:
      # Apex PMD Validaion
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup PMD
        uses: legetz/setup-pmd@7.1.0
      - name: APEX full scan
        run: |
          if ls ./force-app/main/default/classes/*.cls 1> /dev/null 2>&1; then
            pmd check --dir ./force-app/main/default/classes/*.cls --rulesets ./ruleset.xml -f text
          else
            echo "No Apex classes found to scan."
          fi

      # Install Salesforce CLI
      - name: "Install Salesforce CLI"
        run: |
          npm install @salesforce/cli --location=global
                   nodeInstallPath=$(npm config get prefix)
                   echo "$nodeInstallPath/bin" >> $GITHUB_PATH
                   sf --version
      # Checkout the source code
      - name: "Checkout source code"
        uses: actions/checkout@v4

      # Store secret for dev hub
      - name: "Populate auth file with DEVHUB_SFDX_URL secret"
        shell: bash
        run: |
          echo ${{ secrets.DEVHUB_SFDX_URL}} > ./DEVHUB_SFDX_URL.txt
          secretFileSize=$(wc -c "./DEVHUB_SFDX_URL.txt" | awk '{print $1}')
          if [ $secretFileSize == 1 ]; then
              echo "Missing DEVHUB_SFDX_URL secret. Is this workflow running on a fork?";
              exit 1;
          fi

      # Update PR description with commit list
      - name: "Update PR description with commit list"
        if: github.event_name == 'pull_request'
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
        run: |
          sudo apt-get update
          sudo apt-get install -y gh
          PR_NUMBER="${{ github.event.pull_request.number }}"
          COMMITS=$(gh pr view "$PR_NUMBER" --json commits -q '.commits[] | "- üìù \(.oid[0:7]) \(.messageHeadline)"')
          NEW_DESC="Commits in the PR:
          $COMMITS"
          gh pr edit "$PR_NUMBER" --body "$NEW_DESC"

      # Authenticate dev environment
      - name: "Authenticate Dev environment"
        run: sf org login sfdx-url -f ./DEVHUB_SFDX_URL.txt -a defaultOrg -s

      # Run Apex tests with progress monitoring
      - name: "Run Apex tests with progress monitoring"
        run: |
          if ls ./force-app/main/default/classes/*.cls 1> /dev/null 2>&1; then
            echo "üöÄ Starting Apex Tests execution..."
            
            # Run tests in async mode and get job ID with better error handling
            echo "üìä Execution tests with progress monitoring..."
            
            # Create temporary file for command output
            TEMP_OUTPUT=$(mktemp)
            
            # Execute the command and capture both stdout and stderr
            if sf apex test run -c -r json --target-org defaultOrg > "$TEMP_OUTPUT" 2>&1; then
              # Try to extract JSON from the output (skip any warning lines)
              TEST_RUN_RESULT=$(grep -E '^\s*\{.*\}\s*
              
              # Monitor progress every 30 seconds
              COMPLETED=false
              ATTEMPTS=0
              MAX_ATTEMPTS=40  # 20 minutes max (40 * 30s)
              
              while [ "$COMPLETED" = false ] && [ $ATTEMPTS -lt $MAX_ATTEMPTS ]; do
                sleep 30
                ATTEMPTS=$((ATTEMPTS + 1))
                
                echo "‚è≥ Verifying progress... (Attempt $ATTEMPTS/$MAX_ATTEMPTS - $(date +%H:%M:%S))"
                
                # Get tests current status with better error handling
                RESULT_TEMP=$(mktemp)
                if sf apex test report -i $TEST_RUN_ID -r json --target-org defaultOrg > "$RESULT_TEMP" 2>/dev/null; then
                  RESULT=$(cat "$RESULT_TEMP")
                  rm -f "$RESULT_TEMP"
                else
                  echo "‚ö†Ô∏è Could not get test status, retrying..."
                  rm -f "$RESULT_TEMP"
                  continue
                fi
                
                # Validate JSON before parsing
                if echo "$RESULT" | jq empty 2>/dev/null; then
                  STATUS=$(echo "$RESULT" | jq -r '.result.summary.outcome // "Unknown"')
                  TESTS_RAN=$(echo "$RESULT" | jq -r '.result.summary.testsRan // 0')
                  TOTAL_TIME=$(echo "$RESULT" | jq -r '.result.summary.totalTime // "0ms"')
                  
                  echo "üìà Status: $STATUS | Executed Tests: $TESTS_RAN | Total Time: $TOTAL_TIME"
                  
                  if [ "$STATUS" = "Completed" ] || [ "$STATUS" = "Failed" ]; then
                    COMPLETED=true
                    echo "üéØ Tests completed with status: $STATUS"
                    
                    # Get detailed results
                    PASSING=$(echo "$RESULT" | jq -r '.result.summary.passing // 0')
                    FAILING=$(echo "$RESULT" | jq -r '.result.summary.failing // 0')
                    COVERAGE=$(echo "$RESULT" | jq -r '.result.summary.testRunCoverage // "N/A"')
                    
                    echo "‚úÖ Success Tests: $PASSING"
                    echo "‚ùå Failed Tests: $FAILING"
                    echo "üìä Code Coverage: $COVERAGE%"
                    
                    # Get details of failed tests if exist
                    if [ "$FAILING" != "0" ]; then
                      echo ""
                      echo "üîç Details of failed Tests:"
                      echo "$RESULT" | jq -r '.result.tests[]? | select(.Outcome == "Fail") | "‚ùå \(.FullName): \(.Message // "Without message")"' 2>/dev/null || echo "Could not parse failed test details"
                    fi
                    
                    echo ""
                    echo "üìÑ Generating detailed report in human-readable format..."
                    sf apex test report -i $TEST_RUN_ID -r human --target-org defaultOrg -d ./tests/apex
                    
                    # Fail the job if tests failed
                    if [ "$STATUS" = "Failed" ]; then
                      echo "üí• Job failed due to failed tests"
                      exit 1
                    fi
                  fi
                else
                  echo "‚ö†Ô∏è Invalid JSON response received, retrying in 30 seconds..."
                fi
              done
              
              if [ "$COMPLETED" = false ]; then
                echo "‚è∞ Timeout: Tests did not complete within 20 minutes"
                exit 1
              fi
            else
              echo "‚ùå Error: Could not get test run ID from command output"
              echo "üîÑ Trying traditional method as fallback..."
              sf apex test run -c -r human -d ./tests/apex -w 20 --target-org defaultOrg
            fi
          else
            echo "‚ÑπÔ∏è No Apex classes found. Skipping tests."
          fi

      # Delete temporary test file that Codecov is unable to parse
      - name: "Delete coverage file (temporary step)"
        run: |
          if ls ./force-app/main/default/classes/*.cls 1> /dev/null 2>&1; then
            find ./tests/apex -name "test-result-*-codecoverage.json" -delete 2>/dev/null || true
          else
            echo "No Apex classes found to delete coverage file."
          fi

      # Upload code coverage data
      - name: "Upload code coverage for Apex to Codecov.io"
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: Apex "$TEMP_OUTPUT" | tail -1)
              
              if [ -n "$TEST_RUN_RESULT" ]; then
                echo "üìã Command output received, parsing JSON..."
                TEST_RUN_ID=$(echo "$TEST_RUN_RESULT" | jq -r '.result.testRunId // null' 2>/dev/null)
              else
                echo "‚ö†Ô∏è No valid JSON found in output. Full output:"
                cat "$TEMP_OUTPUT"
                TEST_RUN_ID="null"
              fi
            else
              echo "‚ùå Command failed. Output:"
              cat "$TEMP_OUTPUT"
              TEST_RUN_ID="null"
            fi
            
            # Clean up temporary file
            rm -f "$TEMP_OUTPUT"
            
            if [ "$TEST_RUN_ID" != "null" ] && [ -n "$TEST_RUN_ID" ]; then
              echo "‚úÖ Apex Tests started with ID: $TEST_RUN_ID"
              
              # Monitorear el progreso cada 30 segundos
              COMPLETED=false
              ATTEMPTS=0
              MAX_ATTEMPTS=40  # 20 minutos m√°ximo (40 * 30s)
              
              while [ "$COMPLETED" = false ] && [ $ATTEMPTS -lt $MAX_ATTEMPTS ]; do
                sleep 30
                ATTEMPTS=$((ATTEMPTS + 1))
                
                echo "‚è≥ Verificando progreso... (Intento $ATTEMPTS/$MAX_ATTEMPTS - $(date +%H:%M:%S))"
                
                # Obtener el estado actual de las pruebas
                RESULT=$(sf apex test report -i $TEST_RUN_ID -r json --target-org defaultOrg 2>/dev/null || echo '{}')
                
                if [ "$RESULT" != "{}" ]; then
                  STATUS=$(echo "$RESULT" | jq -r '.result.summary.outcome // "Unknown"')
                  TESTS_RAN=$(echo "$RESULT" | jq -r '.result.summary.testsRan // 0')
                  TOTAL_TIME=$(echo "$RESULT" | jq -r '.result.summary.totalTime // "0ms"')
                  
                  echo "üìà Estado: $STATUS | Pruebas ejecutadas: $TESTS_RAN | Tiempo transcurrido: $TOTAL_TIME"
                  
                  if [ "$STATUS" = "Completed" ] || [ "$STATUS" = "Failed" ]; then
                    COMPLETED=true
                    echo "üéØ Pruebas completadas con estado: $STATUS"
                    
                    # Mostrar resumen detallado
                    PASSING=$(echo "$RESULT" | jq -r '.result.summary.passing // 0')
                    FAILING=$(echo "$RESULT" | jq -r '.result.summary.failing // 0')
                    COVERAGE=$(echo "$RESULT" | jq -r '.result.summary.testRunCoverage // "N/A"')
                    
                    echo "‚úÖ Pruebas exitosas: $PASSING"
                    echo "‚ùå Pruebas fallidas: $FAILING"
                    echo "üìä Cobertura de c√≥digo: $COVERAGE%"
                    
                    # Mostrar detalles de pruebas fallidas si existen
                    if [ "$FAILING" != "0" ]; then
                      echo ""
                      echo "üîç Detalles de pruebas fallidas:"
                      echo "$RESULT" | jq -r '.result.tests[]? | select(.Outcome == "Fail") | "‚ùå \(.FullName): \(.Message // "Sin mensaje de error")"'
                    fi
                    
                    echo ""
                    echo "üìÑ Generando reporte detallado en formato human-readable..."
                    sf apex test report -i $TEST_RUN_ID -r human --target-org defaultOrg -d ./tests/apex
                    
                    # Fallar el job si hay pruebas fallidas
                    if [ "$STATUS" = "Failed" ]; then
                      echo "üí• El job fall√≥ debido a pruebas fallidas"
                      exit 1
                    fi
                  fi
                else
                  echo "‚ö†Ô∏è No se pudo obtener el estado de las pruebas, reintentando en 30 segundos..."
                fi
              done
              
              if [ "$COMPLETED" = false ]; then
                echo "‚è∞ Timeout: Las pruebas tardaron m√°s de 20 minutos en completarse"
                exit 1
              fi
            else
              echo "‚ùå Error: No se pudo obtener el ID de ejecuci√≥n de pruebas"
              echo "üîÑ Intentando ejecutar con el m√©todo tradicional como fallback..."
              sf apex test run -c -r human -d ./tests/apex -w 20 --target-org defaultOrg
            fi
          else
            echo "‚ÑπÔ∏è No se encontraron clases Apex para ejecutar pruebas."
          fi

      # Delete temporary test file that Codecov is unable to parse
      - name: "Delete coverage file (temporary step)"
        run: |
          if ls ./force-app/main/default/classes/*.cls 1> /dev/null 2>&1; then
            find ./tests/apex -name "test-result-*-codecoverage.json" -delete 2>/dev/null || true
          else
            echo "No Apex classes found to delete coverage file."
          fi

      # Upload code coverage data
      - name: "Upload code coverage for Apex to Codecov.io"
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: Apex