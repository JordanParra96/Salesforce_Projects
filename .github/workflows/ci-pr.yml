# Unique name for this workflow
name: CI on PR

# Definition when the workflow should run
on:
  workflow_dispatch:
  pull_request:
    types: [opened, synchronize, reopened]

# Jobs to be executed
jobs:
  # Add labels based on branch name
  add-labels:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      issues: write
    if: github.event.pull_request.head.ref != ''
    steps:
      - name: Add PR type labels
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const branchName = context.payload.pull_request.head.ref;
            let labelToAdd = '';

            if (branchName.startsWith('enh_')) {
              labelToAdd = 'enhancement';
            } else if (branchName.startsWith('mod_')) {
              labelToAdd = 'module';
            } else if (branchName.startsWith('proj_')) {
              labelToAdd = 'project';
            }

            if (labelToAdd) {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                labels: [labelToAdd]
              });
            }

  # Update description
  update-desc:
    runs-on: ubuntu-latest
    needs: add-labels
    steps:
      # Update PR description with commit list
      - name: "Update PR description with commit list"
        if: github.event_name == 'pull_request'
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
        run: |
          sudo apt-get update
          sudo apt-get install -y gh
          PR_NUMBER="${{ github.event.pull_request.number }}"
          COMMITS=$(gh pr view "$PR_NUMBER" --json commits -q '.commits[] | "- 📝 \(.oid[0:7]) \(.messageHeadline)"')
          NEW_DESC="Commits in the PR:
          $COMMITS"
          gh pr edit "$PR_NUMBER" --body "$NEW_DESC"

  # Formatting and linting only runs on human-submitted PRs
  format-lint-lwc-tests:
    runs-on: ubuntu-latest
    needs: update-desc
    steps:
      # Checkout the source code
      - name: "Checkout source code"
        uses: actions/checkout@v4

      # Cache node_modules to speed up the process
      - name: "Restore node_modules cache"
        id: cache-npm
        uses: actions/cache@v4
        with:
          path: node_modules
          key: npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            npm-
      # Install npm dependencies for Prettier and Jest
      - name: "Install npm dependencies"
        if: steps.cache-npm.outputs.cache-hit != 'true'
        run: npm ci

      # Prettier formatting
      - name: "Code formatting verification with Prettier"
        run: npm run prettier:verify

      # Lint LWC / Aura
      - name: "Lint Lightning Web Components / Aura Components"
        run: |
          if find ./force-app/main/default/lwc -mindepth 1 -type d | grep -q .; then
            npm run lint
          else
            echo "No LWC components found. Skipping lint."
          fi

      # LWC unit tests
      - name: "Unit test Lightning Web Components"
        run: npm run test:unit:coverage

      # Upload code coverage data
      - name: "Upload code coverage for LWC to Codecov.io"
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: LWC

  developer-org-test:
    runs-on: ubuntu-latest
    needs: format-lint-lwc-tests
    steps:
      # Apex PMD Validaion
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup PMD
        uses: legetz/setup-pmd@7.1.0
      - name: APEX full scan
        run: |
          if ls ./force-app/main/default/classes/*.cls 1> /dev/null 2>&1; then
            pmd check --dir ./force-app/main/default/classes/*.cls --rulesets ./ruleset.xml -f text
          else
            echo "No Apex classes found to scan."
          fi

      # Install Salesforce CLI
      - name: "Install Salesforce CLI"
        run: |
          npm install @salesforce/cli --location=global
                   nodeInstallPath=$(npm config get prefix)
                   echo "$nodeInstallPath/bin" >> $GITHUB_PATH
                   sf --version
      # Checkout the source code
      - name: "Checkout source code"
        uses: actions/checkout@v4

      # Store secret for dev hub
      - name: "Populate auth file with DEVHUB_SFDX_URL secret"
        shell: bash
        run: |
          echo ${{ secrets.DEVHUB_SFDX_URL}} > ./DEVHUB_SFDX_URL.txt
          secretFileSize=$(wc -c "./DEVHUB_SFDX_URL.txt" | awk '{print $1}')
          if [ $secretFileSize == 1 ]; then
              echo "Missing DEVHUB_SFDX_URL secret. Is this workflow running on a fork?";
              exit 1;
          fi

      # Authenticate dev environment
      - name: "Authenticate Dev environment"
        run: sf org login sfdx-url -f ./DEVHUB_SFDX_URL.txt -a defaultOrg -s

      # Run Apex tests in current org org
      - name: "Run Apex tests"
        run: |
          if ls ./force-app/main/default/classes/*.cls 1> /dev/null 2>&1; then
            sf project deploy validate --source-dir force-app --results-dir ./tests/apex --coverage-formatters json -w 20 
          else
            echo "No Apex classes found to scan."
          fi

      # Upload code coverage data
      - name: "Upload code coverage for Apex to Codecov.io"
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: Apex
